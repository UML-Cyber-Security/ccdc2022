
---
- name: setup users
  hosts: servers
  become: true
  remote_user: ubuntu
  vars_files:
  - var.yaml

  tasks:
  - name: Update apt packages
    become: true
    apt:
      update_cache: yes
      upgrade: 'no'
    tags:
    - apt

  - name: Install {{ apt }}
    apt:
      name: "{{ apt }}"
    tags:
    - apt
    - initial

  - name: Ensure group "{{ CCDC_Group }}" exists
    ansible.builtin.group:
      name: "{{ CCDC_Group }}"
      state: present
    tags:
    - initial
    - group

  - name: "Create user accounts"
    user:
      name: "{{ item }}"
      shell: "/bin/bash"
      groups:
      - "{{ CCDC_Group }}"
      #create_home: "False" # Need a place to store ssh files
    with_items: "{{ users }}"
    tags:
    - initial
    - users

  - name: "Add authorized keys"
    authorized_key:
      user: "{{ item }}"
      key: "{{ lookup('file', 'pub_keys/'+ item + '.id_rsa.pub') }}"
    with_items: "{{ users }}"
    tags:
    - initial
    - users
    - ssh

  - name: "Allow admin users to sudo without a password"
    lineinfile:
      dest: "/etc/sudoers"
      state: "present"
      regexp: "^%{{ CCDC_Group }}"
      line: "%{{ CCDC_Group }} ALL=(ALL) NOPASSWD: ALL"
    tags:
    - initial
    - group

  - name: Disable empty password login
    lineinfile: 
      dest: "{{ sshd_config }}" 
      regexp: '^#?PermitEmptyPasswords' 
      line: 'PermitEmptyPasswords no'
    notify: restart sshd
    tags:
    - initial
    - ssh

  - name: Disable remote root login
    lineinfile: 
      dest: "{{ sshd_config }}" 
      regexp: '^#?PermitRootLogin' 
      line: 'PermitRootLogin no'
    notify: restart sshd
    tags:
    - initial
    - ssh

  - name: Disable password login
    lineinfile: 
      dest: "{{ sshd_config }}" 
      regexp: '^(#\s*)?PasswordAuthentication'
      line: 'PasswordAuthentication no'
    notify: restart sshd
    tags:
    - initial
    - ssh

  - name: Change UMASK
    lineinfile: 
      dest: "/etc/login.defs" 
      regexp: '^(#\s*)?UMASK'
      line: 'UMASK 077'
    tags:
    - initial

  handlers:
  - name: restart sshd
      service: name=sshd state=restarted